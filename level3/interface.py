from abc import ABC, abstractmethod


class ContactsManagerInterface(ABC):

    @abstractmethod
    def clear(self) -> None:
        """
        Данная команда очищает базу данных
        """
        pass
    
    @abstractmethod
    def set_record(self, id: int, name: str, phone_number: str) -> bool:
        """
        Данная команда должна добавить в базу данных нового
        пользователя с указанными ID, именем, номером телефона.
        Если пользователь с таким ID уже существует,
        добавление невозможно – в таком случае, команда
        возвращает False. Если пользователь с таким ID
        был успешно добавлен – команда возвращает True.
        """
        pass

    @abstractmethod
    def delete_record(self, id: int) -> bool:
        """
        Данная команда удаляет пользователя с указанным ID
        из базы данных. Если удаление совершено успешно,
        команда возвращает True. Если пользователя с указанным
        ID не существует – команда возвращает False.
        """
        pass

    @abstractmethod
    def call(self, id: int) -> str:
        """
        Данная команда "совершает звонок" пользователю с
        указанным ID. Для этого команда должна вернуть строку
        "CALLING <NAME> WITH <PHONE NUMBER>. Если такого пользователя
        нет, команда возвращает строку "NO SUCH USER".
        """
        pass

    @abstractmethod
    def most_popular(self, n: int) -> list[str]:
        """
        Данная команда должна вернуть список N пользователей,
        которым звонят чаще всего. Если всего пользователей
        меньше, чем N – верните всех пользователей.
        Пользователи в списке должны быть отсортированы
        по количеству звонков в убывающем порядке.
        В случае ничьи – по алфавиту в возрастающем порядке.
        В случае если пользователю ни разу не звонили - игнорируйте его
        Команда возвращает список строк в данном формате:
        [<Name>(<Calls>), <Name2>(<Calls2>), ..., <NameN>(<CallsN>)]
        """
        pass

    @abstractmethod
    def call_with_ts(self, id: int, ts: int) -> str:
        """
        Данная команда работает так же, как и call, но сопровождает
        информацию о звонке таймстампом (целым числом, обозначающим время звонка).
        Гарантируется, что ts > 0 и ts в последовательных вызовах call_with_ts всегда
        возрастают. Команда возвращает строку "CALLING <NAME> WITH <PHONE NUMBER> AT <ts>".
        Если такого пользователя нет, команда возвращает строку "NO SUCH USER".
        """
        pass

    @abstractmethod
    def most_popular_in_range(self, n: int, ts_start: int, ts_end: int) -> list[str]:
        """
        Данная команда работает так же, как и most_popular, но работает только с теми звонками,
        которые были между ts_start и ts_end. Звонок, совершенный во время ts,
        считается попавшим в промежуток [ts_start, ts_end], если
        ts_start <= ts <= ts_end.
        В случае если пользователю ни разу не звонили за промежуток времени - игнорируйте его.
        """
        pass

    @abstractmethod
    def calls_history(self, id: int) -> list[str]:
        """
        Данная команда возвращает список звонков, совершенных пользователю
        с указанным ID. Каждый звонок должен быть представлен в виде одного
        единственного числа – своего ts. Звонки, совершенные без указания ts
        (с помощью операции call), должны быть представлены нулем. Звонки с нулем
        нет смысла выводить отдельно, поэтому их следует представить в виде "0(n)",
        где n – количество таких звонков

        Например, если пользователю с ID=1 звонили всего 5 раз таким образом:
        call(1)
        call_with_ts(1, 13)
        call_with_ts(1, 14)
        call(1)
        call_with_ts(1, 152)

        То вывод команды calls_history(1) будет таким:
        ["0(2)", "13", "14", "152"]
        """
        pass


